#include "Map.h"

Map::Map()
{
}

Map::~Map()
{
}

void Map::Init()
{
			map_ID = { {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, },
					{1, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 1, },
					{1, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 1, },
					{1, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 1, },
					{1, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 1, },
					{1, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 1, },
					{1, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 40, 41, 1, },
					{1, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 42, 43, 1, },
					{1, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 33, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 23, 1, },
					{1, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 15, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 27, 1, },
					{1, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 15, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 27, 1, },
					{1, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 15, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 27, 1, },
					{1, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 15, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 27, 1, },
					{1, 31, 31, 31, 31, 31, 31, 31, 13, 31, 31, 31, 31, 15, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 27, 1, },
					{1, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 15, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 27, 1, },
					{1, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 15, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 27, 1, },
					{1, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 15, 4, 4, 4, 4, 4, 4, 27, 1, },
					{1, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 15, 4, 4, 4, 4, 4, 4, 27, 1, },
					{1, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 15, 4, 4, 4, 4, 4, 4, 27, 1, },
					{1, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 15, 4, 4, 4, 4, 4, 4, 27, 1, },
					{1, 31, 31, 31, 31, 31, 31, 31, 13, 31, 31, 31, 31, 31, 33, 23, 31, 31, 31, 31, 31, 31, 31, 15, 4, 4, 4, 4, 4, 4, 27, 1, },
					{1, 31, 31, 31, 31, 31, 31, 31, 4, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 15, 4, 4, 4, 4, 4, 4, 27, 1, },
					{1, 31, 31, 31, 31, 31, 31, 31, 4, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 15, 4, 4, 4, 4, 4, 4, 27, 1, },
					{1, 31, 31, 31, 31, 31, 31, 31, 4, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 15, 27, 1, },
					{1, 31, 31, 31, 31, 31, 31, 31, 4, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 15, 27, 1, },
					{1, 31, 31, 31, 31, 31, 31, 31, 4, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 15, 27, 1, },
					{1, 31, 31, 31, 31, 31, 31, 31, 4, 31, 31, 31, 31, 31, 31, 31, 13, 31, 31, 31, 31, 33, 23, 31, 31, 31, 31, 31, 31, 15, 27, 1, },
					{1, 31, 31, 31, 31, 31, 31, 31, 4, 31, 31, 31, 31, 31, 31, 31, 4, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 15, 27, 1, },
					{1, 31, 31, 31, 31, 31, 31, 31, 4, 31, 31, 31, 31, 31, 31, 31, 4, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 15, 27, 1, },
					{1, 31, 31, 31, 31, 31, 31, 31, 4, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 15, 27, 1, },
					{1, 31, 31, 31, 31, 31, 31, 31, 4, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 15, 27, 1, },
					{1, 31, 31, 31, 31, 31, 31, 31, 4, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 15, 27, 1, },
					{1, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 33, 23, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 1, },
					{1, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 1, },
					{1, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 1, },
					{1, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 1, },
					{1, 31, 31, 31, 31, 31, 31, 31, 31, 31, 33, 23, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 1, },
					{1, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 1, },
					{1, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 1, },
					{1, 31, 31, 31, 31, 31, 31, 31, 13, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 33, 23, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 1, },
					{1, 31, 31, 31, 31, 31, 31, 31, 4, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 1, },
					{1, 31, 31, 31, 31, 31, 31, 31, 4, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 1, },
					{1, 31, 31, 31, 31, 31, 31, 31, 4, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 1, },
					{1, 31, 31, 31, 31, 31, 31, 31, 4, 31, 31, 31, 33, 13, 23, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 1, },
					{1, 31, 31, 31, 31, 31, 31, 31, 4, 31, 31, 31, 15, 4, 27, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 1, },
					{1, 31, 31, 31, 31, 31, 31, 31, 4, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 1, },
					{1, 31, 31, 31, 31, 31, 31, 31, 4, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 1, },
					{1, 31, 31, 31, 31, 31, 31, 31, 4, 31, 31, 31, 31, 31, 31, 31, 31, 31, 33, 13, 13, 23, 31, 31, 31, 31, 31, 31, 31, 31, 31, 1, },
					{1, 31, 31, 31, 31, 31, 31, 31, 4, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 1, },
					{1, 31, 31, 31, 31, 31, 31, 31, 4, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 1, },
					{1, 31, 31, 31, 31, 31, 31, 31, 4, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 1, },
					{1, 31, 31, 31, 31, 31, 31, 31, 4, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 33, 23, 31, 31, 31, 31, 1, },
					{1, 38, 38, 38, 38, 38, 38, 38, 29, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 29, 29, 38, 38, 38, 38, 1, },
					{1, 38, 38, 38, 38, 38, 38, 38, 29, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 29, 29, 38, 38, 38, 38, 1, },
					{1, 38, 38, 38, 38, 38, 38, 38, 29, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 29, 29, 29, 29, 29, 29, 38, 38, 38, 38, 1, },
					{1, 38, 38, 38, 38, 38, 38, 38, 29, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 1, },
					{1, 38, 38, 38, 38, 38, 38, 38, 29, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 1, },
					{1, 38, 38, 38, 38, 38, 38, 38, 29, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 1, },
					{1, 38, 38, 38, 38, 38, 38, 38, 29, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 28, 22, 14, 38, 38, 38, 38, 1, },
					{1, 38, 38, 38, 38, 38, 38, 38, 29, 38, 38, 38, 38, 38, 38, 38, 28, 14, 38, 38, 38, 28, 22, 22, 14, 38, 38, 38, 38, 38, 38, 1, },
					{1, 38, 38, 38, 38, 38, 38, 38, 29, 38, 38, 38, 38, 38, 38, 38, 38, 8, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 1, },
					{1, 38, 38, 38, 38, 38, 38, 38, 29, 38, 38, 38, 38, 38, 38, 38, 38, 9, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 1, },
					{1, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 1, },
					{1, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 1, },
					{1, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 28, 22, 14, 1, },
					{1, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 1, },
					{1, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 1, },
					{1, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 1, },
					{1, 28, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 14, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 1, },
					{1, 10, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 12, 12, 8, 38, 38, 38, 38, 28, 22, 22, 14, 38, 38, 38, 38, 38, 1, },
					{1, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 37, 12, 8, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 1, },
					{1, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 37, 12, 8, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 1, },
					{1, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 37, 12, 8, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 1, },
					{1, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 37, 12, 8, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 1, },
					{1, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 10, 2, 2, 2, 9, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 1, },
					{1, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 1, },
					{1, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 28, 22, 14, 38, 38, 38, 38, 1, },
					{1, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 1, },
					{1, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 1, },
					{1, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 1, },
					{1, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 28, 22, 22, 22, 22, 22, 22, 22, 22, 14, 38, 38, 38, 38, 38, 38, 38, 38, 38, 1, },
					{1, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 10, 2, 2, 2, 2, 2, 2, 2, 2, 9, 38, 38, 38, 38, 38, 38, 38, 38, 38, 1, },
					{1, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 1, },
					{1, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 1, },
					{1, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 1, },
					{1, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 28, 14, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 1, },
					{1, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 28, 14, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 1, },
					{1, 38, 38, 38, 38, 28, 22, 14, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 28, 14, 38, 38, 38, 38, 38, 38, 38, 1, },
					{1, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 1, },
					{1, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 1, },
					{1, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 1, },
					{1, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 28, 22, 14, 1, },
					{1, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 1, },
					{1, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 28, 22, 14, 38, 38, 38, 38, 38, 38, 38, 38, 38, 1, },
					{1, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 1, },
					{1, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 1, },
					{1, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 1, },
					{1, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 1, },
					{1, 25, 25, 25, 25, 25, 25, 25, 25, 17, 36, 7, 25, 25, 25, 25, 25, 25, 25, 17, 36, 7, 25, 25, 25, 25, 25, 25, 25, 25, 25, 1, },
					{1, 25, 25, 25, 25, 25, 25, 25, 25, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 24, 11, 19, 25, 25, 25, 25, 25, 25, 25, 25, 25, 1, },
					{1, 25, 25, 25, 25, 25, 25, 25, 25, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 24, 11, 19, 25, 25, 25, 25, 25, 25, 25, 25, 25, 1, },
					{1, 25, 25, 25, 25, 25, 25, 25, 25, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 5, 16, 19, 25, 25, 25, 25, 25, 25, 25, 25, 25, 1, },
					{1, 25, 25, 25, 25, 25, 25, 25, 25, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 19, 25, 25, 25, 25, 25, 25, 25, 25, 25, 1, },
					{1, 25, 25, 25, 25, 25, 25, 25, 25, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 19, 25, 25, 25, 25, 25, 25, 25, 25, 25, 1, },
					{1, 25, 25, 25, 25, 25, 25, 25, 25, 17, 36, 7, 25, 25, 25, 25, 25, 25, 25, 25, 25, 19, 25, 25, 25, 25, 25, 25, 25, 25, 25, 1, },
					{1, 25, 25, 25, 25, 25, 25, 25, 25, 24, 11, 19, 25, 25, 25, 25, 25, 25, 25, 25, 25, 19, 25, 25, 25, 25, 25, 25, 25, 25, 25, 1, },
					{1, 25, 25, 25, 25, 25, 25, 25, 25, 24, 11, 19, 25, 25, 25, 25, 25, 25, 25, 25, 25, 19, 25, 25, 25, 25, 25, 25, 25, 25, 25, 1, },
					{1, 25, 25, 25, 25, 25, 25, 25, 25, 5, 16, 18, 25, 25, 25, 25, 25, 25, 25, 25, 25, 19, 25, 25, 25, 25, 25, 25, 25, 25, 25, 1, },
					{1, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 19, 25, 25, 25, 25, 25, 25, 25, 25, 25, 1, },
					{1, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 17, 36, 7, 25, 25, 25, 25, 25, 25, 25, 25, 25, 1, },
					{1, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 24, 11, 19, 25, 25, 25, 25, 25, 25, 25, 25, 25, 1, },
					{1, 17, 36, 7, 25, 25, 25, 25, 25, 17, 36, 36, 7, 25, 25, 25, 25, 25, 25, 5, 16, 18, 25, 25, 25, 25, 25, 25, 25, 25, 25, 1, },
					{1, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 1, },
					{1, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 1, },
					{1, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 1, },
					{1, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 1, },
					{1, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 1, },
					{1, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 1, },
					{1, 25, 25, 25, 25, 25, 25, 17, 36, 7, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 1, },
					{1, 25, 25, 25, 25, 25, 25, 5, 16, 18, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 1, },
					{1, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 1, },
					{1, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 1, },
					{1, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 1, },
					{1, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 1, },
					{1, 17, 36, 7, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 1, },
					{1, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 1, },
					{1, 25, 25, 25, 25, 25, 25, 25, 25, 17, 36, 36, 7, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 1, },
					{1, 25, 25, 25, 25, 25, 25, 25, 25, 24, 11, 11, 19, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 1, },
					{1, 25, 25, 25, 25, 25, 25, 25, 25, 5, 16, 16, 18, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 1, },
					{1, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 1, },
					{1, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 1, },
					{1, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 1, },
					{1, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 1, },
					{1, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 17, 36, 7, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 1, },
					{1, 25, 25, 25, 25, 25, 25, 25, 25, 25, 17, 36, 36, 36, 36, 36, 36, 36, 7, 11, 19, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 1, },
					{1, 25, 25, 25, 25, 25, 25, 25, 25, 25, 24, 11, 11, 11, 11, 11, 11, 11, 11, 11, 19, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 1, },
					{1, 25, 25, 25, 25, 25, 25, 25, 25, 25, 5, 16, 16, 16, 16, 16, 16, 16, 16, 16, 18, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 1, },
					{1, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 17, 36, 7, 1, },
					{1, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 1, },
					{1, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 1, },
					{1, 25, 25, 25, 25, 25, 25, 25, 25, 17, 36, 7, 25, 25, 25, 25, 25, 25, 17, 36, 7, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 1, },
					{1, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 1, },
					{1, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 1, },
					{1, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 1, },
					{1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 1, },
					{1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 1, },
					{1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 1, },
					{1, 39, 34, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 1, },
					{1, 20, 32, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 1, },
					{1, 20, 32, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 1, },
					{1, 35, 6, 6, 30, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 1, },
					{1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 1, },
					{1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 1, },
					{1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 39, 21, 21, 34, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 1, },
					{1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 20, 32, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 1, },
					{1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 35, 30, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 1, },
					{1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 39, 21, 21, 34, 26, 26, 26, 39, 21, 21, 34, 1, },
					{1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 1, },
					{1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 1, },
					{1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 1, },
					{1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 39, 21, 21, 34, 26, 26, 26, 26, 1, },
					{1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 35, 6, 6, 30, 26, 26, 26, 26, 1, },
					{1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 1, },
					{1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 1, },
					{1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 1, },
					{1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 39, 21, 21, 21, 21, 21, 21, 34, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 1, },
					{1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 39, 34, 3, 3, 3, 3, 3, 3, 39, 34, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 1, },
					{1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 35, 6, 6, 6, 6, 6, 6, 6, 6, 30, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 1, },
					{1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 1, },
					{1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 1, },
					{1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 1, },
					{1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 1, },
					{1, 39, 21, 21, 21, 21, 21, 21, 21, 21, 21, 34, 26, 26, 26, 26, 26, 26, 26, 26, 39, 21, 21, 21, 21, 21, 21, 21, 21, 21, 34, 1, },
					{1, 20, 3, 3, 3, 3, 3, 3, 3, 3, 3, 32, 26, 26, 26, 26, 26, 26, 26, 26, 20, 3, 3, 3, 3, 3, 3, 3, 3, 3, 32, 1, },
					{1, 20, 3, 3, 3, 3, 3, 3, 3, 3, 3, 32, 26, 26, 26, 26, 26, 26, 26, 26, 20, 3, 3, 3, 3, 3, 3, 3, 3, 3, 32, 1, },
					{1, 20, 3, 3, 3, 3, 3, 3, 3, 3, 3, 32, 26, 26, 26, 26, 26, 26, 26, 26, 20, 3, 3, 3, 3, 3, 3, 3, 3, 3, 32, 1, },
					{1, 20, 3, 3, 3, 3, 3, 3, 3, 3, 3, 32, 26, 26, 26, 26, 26, 26, 26, 26, 20, 3, 3, 3, 3, 3, 3, 3, 3, 3, 32, 1, },
					{1, 20, 3, 3, 3, 3, 3, 3, 3, 3, 3, 32, 26, 26, 26, 26, 26, 26, 26, 26, 20, 3, 3, 3, 3, 3, 3, 3, 3, 3, 32, 1, },
					{1, 35, 6, 6, 6, 6, 6, 6, 6, 6, 6, 30, 26, 26, 26, 26, 26, 26, 26, 26, 35, 6, 6, 6, 6, 6, 6, 6, 6, 6, 30, 1, },
					{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 } };
	map_Texture.assign(216, std::vector <Block*>(32));
	for (int i = 0; i < map_ID.size(); i++)
	{
		for (int j = 0; j < map_ID[i].size(); j++)
		{
			//rock
			if (map_ID[i][j] == 1) {
				map_Texture[i][j] = new Block("MapTexture/rock/rock", sf::Vector2f(42.f, 42.f), sf::Vector2f(42 * j + 104, 42 * i + 21));
				m_Block.push_back(map_Texture[i][j]);
			}
			if (map_ID[i][j] == 29) {
				map_Texture[i][j] = new Block("MapTexture/rock/green_rock", sf::Vector2f(42.f, 42.f), sf::Vector2f(42 * j + 104, 42 * i + 21));
				m_Block.push_back(map_Texture[i][j]);
			}

			//dirt
			if (map_ID[i][j] == 39) {
				map_Texture[i][j] = new Block("MapTexture/dirt/dirt_11", sf::Vector2f(42.f, 42.f), sf::Vector2f(42 * j + 104, 42 * i + 21));
				m_Block.push_back(map_Texture[i][j]);
			}
			if (map_ID[i][j] == 21) {
				map_Texture[i][j] = new Block("MapTexture/dirt/dirt_12", sf::Vector2f(42.f, 42.f), sf::Vector2f(42 * j + 104, 42 * i + 21));
				m_Block.push_back(map_Texture[i][j]);
			}
			if (map_ID[i][j] == 34) {
				map_Texture[i][j] = new Block("MapTexture/dirt/dirt_13", sf::Vector2f(42.f, 42.f), sf::Vector2f(42 * j + 104, 42 * i + 21));
				m_Block.push_back(map_Texture[i][j]);
			}
			if (map_ID[i][j] == 20) {
				map_Texture[i][j] = new Block("MapTexture/dirt/dirt_21", sf::Vector2f(42.f, 42.f), sf::Vector2f(42 * j + 104, 42 * i + 21));
				m_Block.push_back(map_Texture[i][j]);
			}
			if (map_ID[i][j] == 3) {
				map_Texture[i][j] = new Block("MapTexture/dirt/dirt_22", sf::Vector2f(42.f, 42.f), sf::Vector2f(42 * j + 104, 42 * i + 21));
			}
			if (map_ID[i][j] == 32) {
				map_Texture[i][j] = new Block("MapTexture/dirt/dirt_23", sf::Vector2f(42.f, 42.f), sf::Vector2f(42 * j + 104, 42 * i + 21));
				m_Block.push_back(map_Texture[i][j]);
			}
			if (map_ID[i][j] == 35) {
				map_Texture[i][j] = new Block("MapTexture/dirt/dirt_31", sf::Vector2f(42.f, 42.f), sf::Vector2f(42 * j + 104, 42 * i + 21));
				m_Block.push_back(map_Texture[i][j]);
			}
			if (map_ID[i][j] == 6) {
				map_Texture[i][j] = new Block("MapTexture/dirt/dirt_32", sf::Vector2f(42.f, 42.f), sf::Vector2f(42 * j + 104, 42 * i + 21));
				m_Block.push_back(map_Texture[i][j]);
			}
			if (map_ID[i][j] == 30) {
				map_Texture[i][j] = new Block("MapTexture/dirt/dirt_33", sf::Vector2f(42.f, 42.f), sf::Vector2f(42 * j + 104, 42 * i + 21));
				m_Block.push_back(map_Texture[i][j]);
			}

			//pink_dirt
			if (map_ID[i][j] == 17) {
				map_Texture[i][j] = new Block("MapTexture/pink_dirt/pink_dirt_11", sf::Vector2f(42.f, 42.f), sf::Vector2f(42 * j + 104, 42 * i + 21));
				m_Block.push_back(map_Texture[i][j]);
			}
			if (map_ID[i][j] == 36) {
				map_Texture[i][j] = new Block("MapTexture/pink_dirt/pink_dirt_12", sf::Vector2f(42.f, 42.f), sf::Vector2f(42 * j + 104, 42 * i + 21));
				m_Block.push_back(map_Texture[i][j]);
			}
			if (map_ID[i][j] == 7) {
				map_Texture[i][j] = new Block("MapTexture/pink_dirt/pink_dirt_13", sf::Vector2f(42.f, 42.f), sf::Vector2f(42 * j + 104, 42 * i + 21));
				m_Block.push_back(map_Texture[i][j]);
			}
			if (map_ID[i][j] == 24) {
				map_Texture[i][j] = new Block("MapTexture/pink_dirt/pink_dirt_21", sf::Vector2f(42.f, 42.f), sf::Vector2f(42 * j + 104, 42 * i + 21));
				m_Block.push_back(map_Texture[i][j]);
			}
			if (map_ID[i][j] == 11) {
				map_Texture[i][j] = new Block("MapTexture/pink_dirt/pink_dirt_22", sf::Vector2f(42.f, 42.f), sf::Vector2f(42 * j + 104, 42 * i + 21));
			}
			if (map_ID[i][j] == 19) {
				map_Texture[i][j] = new Block("MapTexture/pink_dirt/pink_dirt_23", sf::Vector2f(42.f, 42.f), sf::Vector2f(42 * j + 104, 42 * i + 21));
				m_Block.push_back(map_Texture[i][j]);
			}
			if (map_ID[i][j] == 5) {
				map_Texture[i][j] = new Block("MapTexture/pink_dirt/pink_dirt_31", sf::Vector2f(42.f, 42.f), sf::Vector2f(42 * j + 104, 42 * i + 21));
				m_Block.push_back(map_Texture[i][j]);
			}
			if (map_ID[i][j] == 16) {
				map_Texture[i][j] = new Block("MapTexture/pink_dirt/pink_dirt_32", sf::Vector2f(42.f, 42.f), sf::Vector2f(42 * j + 104, 42 * i + 21));
				m_Block.push_back(map_Texture[i][j]);
			}
			if (map_ID[i][j] == 18) {
				map_Texture[i][j] = new Block("MapTexture/pink_dirt/pink_dirt_33", sf::Vector2f(42.f, 42.f), sf::Vector2f(42 * j + 104, 42 * i + 21));
				m_Block.push_back(map_Texture[i][j]);
			}

			//orange_dirt
			if (map_ID[i][j] == 28) {
				map_Texture[i][j] = new Block("MapTexture/orange_dirt/orange_dirt_11", sf::Vector2f(42.f, 42.f), sf::Vector2f(42 * j + 104, 42 * i + 21));
				m_Block.push_back(map_Texture[i][j]);
			}
			if (map_ID[i][j] == 22) {
				map_Texture[i][j] = new Block("MapTexture/orange_dirt/orange_dirt_12", sf::Vector2f(42.f, 42.f), sf::Vector2f(42 * j + 104, 42 * i + 21));
				m_Block.push_back(map_Texture[i][j]);
			}
			if (map_ID[i][j] == 14) {
				map_Texture[i][j] = new Block("MapTexture/orange_dirt/orange_dirt_13", sf::Vector2f(42.f, 42.f), sf::Vector2f(42 * j + 104, 42 * i + 21));
				m_Block.push_back(map_Texture[i][j]);
			}
			if (map_ID[i][j] == 37) {
				map_Texture[i][j] = new Block("MapTexture/orange_dirt/orange_dirt_21", sf::Vector2f(42.f, 42.f), sf::Vector2f(42 * j + 104, 42 * i + 21));
				m_Block.push_back(map_Texture[i][j]);
			}
			if (map_ID[i][j] == 12) {
				map_Texture[i][j] = new Block("MapTexture/orange_dirt/orange_dirt_22", sf::Vector2f(42.f, 42.f), sf::Vector2f(42 * j + 104, 42 * i + 21));
			}
			if (map_ID[i][j] == 8) {
				map_Texture[i][j] = new Block("MapTexture/orange_dirt/orange_dirt_23", sf::Vector2f(42.f, 42.f), sf::Vector2f(42 * j + 104, 42 * i + 21));
				m_Block.push_back(map_Texture[i][j]);
			}
			if (map_ID[i][j] == 10) {
				map_Texture[i][j] = new Block("MapTexture/orange_dirt/orange_dirt_31", sf::Vector2f(42.f, 42.f), sf::Vector2f(42 * j + 104, 42 * i + 21));
				m_Block.push_back(map_Texture[i][j]);
			}
			if (map_ID[i][j] == 2) {
				map_Texture[i][j] = new Block("MapTexture/orange_dirt/orange_dirt_32", sf::Vector2f(42.f, 42.f), sf::Vector2f(42 * j + 104, 42 * i + 21));
				m_Block.push_back(map_Texture[i][j]);
			}
			if (map_ID[i][j] == 9) {
				map_Texture[i][j] = new Block("MapTexture/orange_dirt/orange_dirt_33", sf::Vector2f(42.f, 42.f), sf::Vector2f(42 * j + 104, 42 * i + 21));
				m_Block.push_back(map_Texture[i][j]);
			}

			//ice
			if (map_ID[i][j] == 33) {
				map_Texture[i][j] = new Block("MapTexture/ice/ice_11", sf::Vector2f(42.f, 42.f), sf::Vector2f(42 * j + 104, 42 * i + 21));
				m_Block.push_back(map_Texture[i][j]);
			}
			if (map_ID[i][j] == 13) {
				map_Texture[i][j] = new Block("MapTexture/ice/ice_12", sf::Vector2f(42.f, 42.f), sf::Vector2f(42 * j + 104, 42 * i + 21));
				m_Block.push_back(map_Texture[i][j]);
			}
			if (map_ID[i][j] == 23) {
				map_Texture[i][j] = new Block("MapTexture/ice/ice_13", sf::Vector2f(42.f, 42.f), sf::Vector2f(42 * j + 104, 42 * i + 21));
				m_Block.push_back(map_Texture[i][j]);
			}
			if (map_ID[i][j] == 15) {
				map_Texture[i][j] = new Block("MapTexture/ice/ice_21", sf::Vector2f(42.f, 42.f), sf::Vector2f(42 * j + 104, 42 * i + 21));
				m_Block.push_back(map_Texture[i][j]);
			}
			if (map_ID[i][j] == 4) {
				map_Texture[i][j] = new Block("MapTexture/ice/ice_22", sf::Vector2f(42.f, 42.f), sf::Vector2f(42 * j + 104, 42 * i + 21));
				m_Block.push_back(map_Texture[i][j]);
			}
			if (map_ID[i][j] == 27) {
				map_Texture[i][j] = new Block("MapTexture/ice/ice_23", sf::Vector2f(42.f, 42.f), sf::Vector2f(42 * j + 104, 42 * i + 21));
				m_Block.push_back(map_Texture[i][j]);
			}

			//win
			if (map_ID[i][j] == 40) {
				map_Texture[i][j] = new Block("MapTexture/cup/cup_11", sf::Vector2f(42.f, 42.f), sf::Vector2f(42 * j + 104, 42 * i + 21));
			}
			if (map_ID[i][j] == 41) {
				map_Texture[i][j] = new Block("MapTexture/cup/cup_12", sf::Vector2f(42.f, 42.f), sf::Vector2f(42 * j + 104, 42 * i + 21));
			}
			if (map_ID[i][j] == 42) {
				map_Texture[i][j] = new Block("MapTexture/cup/cup_21", sf::Vector2f(42.f, 42.f), sf::Vector2f(42 * j + 104, 42 * i + 21));
			}
			if (map_ID[i][j] == 43) {
				map_Texture[i][j] = new Block("MapTexture/cup/cup_22", sf::Vector2f(42.f, 42.f), sf::Vector2f(42 * j + 104, 42 * i + 21));
			}

			//back_ground
			if (map_ID[i][j] == 26) {
				map_Texture[i][j] = new Block("MapTexture/background/green", sf::Vector2f(42.f, 42.f), sf::Vector2f(42 * j + 104, 42 * i + 21));
			}
			if (map_ID[i][j] == 31) {
				map_Texture[i][j] = new Block("MapTexture/background/blue", sf::Vector2f(42.f, 42.f), sf::Vector2f(42 * j + 104, 42 * i + 21));
			}
			if (map_ID[i][j] == 38) {
				map_Texture[i][j] = new Block("MapTexture/background/yellow", sf::Vector2f(42.f, 42.f), sf::Vector2f(42 * j + 104, 42 * i + 21));
			}
			if (map_ID[i][j] == 25) {
				map_Texture[i][j] = new Block("MapTexture/background/pink", sf::Vector2f(42.f, 42.f), sf::Vector2f(42 * j + 104, 42 * i + 21));
			}
		}
	}
}

void Map::Render(sf::RenderWindow* window)
{
	for (int i = 0; i < map_ID.size(); i++)
	{
		for (int j = 0; j < map_ID[i].size(); j++)
		{
			if (map_ID[i][j] != 0) {
				map_Texture[i][j]->Render(window);
			}
		}
	}
}

std::vector <Block*> Map::getBlock() {
	return m_Block;
}
